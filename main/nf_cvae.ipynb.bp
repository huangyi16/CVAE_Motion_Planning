{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import torch.nn.functional as F\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.patches as patches\n",
    "\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "mb_size = 256 # batch size\n",
    "h_Q_dim = 512 # encoder hidden layers dimension\n",
    "h_P_dim = 512 # decoder hidden layers dimension\n",
    "\n",
    "c = 0\n",
    "lr = 1e-4\n",
    "\n",
    "dim = 2\n",
    "data_elements = dim + dim * 2 + 4 * 3\n",
    "z_dim = 10\n",
    "X_dim = dim * 30\n",
    "y_dim = dim * 30\n",
    "c_dim = dim * 2 + 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3626561, 16)\n",
      "(3626561, 60)\n"
     ]
    }
   ],
   "source": [
    "# read data from npy\n",
    "c_filename = '../dataset_c.npy'\n",
    "x_filename = '../dataset_x.npy'\n",
    "\n",
    "dataset_c = np.load(c_filename)\n",
    "dataset_x = np.load(x_filename)\n",
    "print(dataset_c.shape)\n",
    "print(dataset_x.shape)\n",
    "\n",
    "# data = np.concatenate((dataset_x, dataset_c), axis=1)\n",
    "# print(data.shape)\n",
    "\n",
    "num_data = dataset_c.shape[0]\n",
    "\n",
    "ratio_test_train = 0.8\n",
    "num_train = int(num_data * ratio_test_train)\n",
    "\n",
    "X_train = dataset_x[0: num_train, :]\n",
    "c_train = dataset_c[:num_train, :]\n",
    "\n",
    "X_test = dataset_x[num_train:, :]\n",
    "c_test = dataset_c[num_train:, :]\n",
    "num_test = c_test.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Encoder(nn.Module):\n",
    "    def __init__(self, input_dim, c_dim, h_Q_dim, z_dim):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.fc1  = nn.Linear(input_dim+c_dim, h_Q_dim)\n",
    "        self.fc2 = nn.Linear(h_Q_dim, h_Q_dim)\n",
    "        self.fc_mu = nn.Linear(h_Q_dim, z_dim)\n",
    "        self.fc_logvar = nn.Linear(h_Q_dim, z_dim)\n",
    "\n",
    "    def forward(self, x, c):\n",
    "        x = torch.cat((x, c), dim=1)\n",
    "        x = F.relu(self.fc1(x))\n",
    "        x = F.dropout(x, p=0.5)\n",
    "        x = F.relu(self.fc2(x))\n",
    "        # x = F.dropout(x, p=0.5)\n",
    "        # x = F.relu(self.fc2(x))\n",
    "        z_mu = self.fc_mu(x)\n",
    "        z_logvar = self.fc_logvar(x)\n",
    "        return z_mu, z_logvar\n",
    "    \n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, z_dim, c_dim, h_P_dim, X_dim):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.fc1 = nn.Linear(z_dim + c_dim, h_P_dim)\n",
    "        self.fc2 = nn.Linear(h_P_dim, h_P_dim)\n",
    "        self.fc3 = nn.Linear(h_P_dim, X_dim)\n",
    "\n",
    "    def forward(self, z, c):\n",
    "        z = torch.cat((z, c), dim=1)\n",
    "        x = F.relu(self.fc1(z))\n",
    "        x = F.dropout(x, p=0.5)\n",
    "        x = F.relu(self.fc2(x))\n",
    "        # x = F.dropout(x, p=0.5)\n",
    "        # x = F.relu(self.fc2(x))\n",
    "        y = self.fc3(x)\n",
    "        return y\n",
    "    \n",
    "class CVAE(nn.Module):\n",
    "    def __init__(self, input_dim, c_dim, h_Q_dim, z_dim, h_P_dim, X_dim, lr=0.001):\n",
    "        super(CVAE, self).__init__()\n",
    "        self.encoder = Encoder(input_dim, c_dim, h_Q_dim, z_dim)\n",
    "        self.decoder = Decoder(z_dim, c_dim, h_P_dim, X_dim)\n",
    "        self.optimizer = optim.Adam(self.parameters(), lr=lr)\n",
    "        print(input_dim, c_dim, h_Q_dim, z_dim, h_P_dim, X_dim)\n",
    "\n",
    "    def forward(self, x, c):\n",
    "        z_mu, z_logvar = self.encoder(x, c)\n",
    "        eps = torch.randn_like(z_mu)\n",
    "        z = z_mu + torch.exp(z_logvar / 2) * eps\n",
    "        recon_x = self.decoder(z, c)\n",
    "        return recon_x, z_mu, z_logvar\n",
    "\n",
    "    def loss_function(self, recon_x, x, z_mu, z_logvar):\n",
    "        recon_loss = F.mse_loss(recon_x, x, reduction='none')\n",
    "        weights = torch.Tensor([[1]*60]).to(device)\n",
    "        weights = weights.repeat(256, 1)\n",
    "        recon_loss = recon_loss * weights\n",
    "        # recon_loss = recon_loss.mean()\n",
    "        # kl_loss = -0.5 * torch.sum(1 + z_logvar - z_mu.pow(2) - z_logvar.exp())\n",
    "        kl_loss = 10**-4 * 2 * torch.sum(torch.exp(z_logvar)+z_mu**2-1.-z_logvar, 1)\n",
    "        return torch.mean(torch.mean(recon_loss, 1) + kl_loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60 16 512 10 512 60\n"
     ]
    }
   ],
   "source": [
    "model = CVAE(X_dim, c_dim, h_Q_dim, z_dim, h_P_dim, X_dim, lr).to(device)\n",
    "optimizer = optim.Adam(model.parameters(), lr=lr)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iter: 0\n",
      "Loss: 0.3661\n",
      "\n",
      "Iter: 1000\n",
      "Loss: 0.0088\n",
      "\n",
      "Iter: 2000\n",
      "Loss: 0.0069\n",
      "\n",
      "Iter: 3000\n",
      "Loss: 0.0056\n",
      "\n",
      "Iter: 4000\n",
      "Loss: 0.0045\n",
      "\n",
      "Iter: 5000\n",
      "Loss: 0.0040\n",
      "\n",
      "Iter: 6000\n",
      "Loss: 0.0035\n",
      "\n",
      "Iter: 7000\n",
      "Loss: 0.0033\n",
      "\n",
      "Iter: 8000\n",
      "Loss: 0.0030\n",
      "\n",
      "Iter: 9000\n",
      "Loss: 0.0028\n",
      "\n",
      "Iter: 10000\n",
      "Loss: 0.0027\n",
      "\n",
      "Iter: 11000\n",
      "Loss: 0.0025\n",
      "\n",
      "Iter: 12000\n",
      "Loss: 0.0022\n",
      "\n",
      "Iter: 13000\n",
      "Loss: 0.0020\n",
      "\n",
      "Iter: 14000\n",
      "Loss: 0.0020\n",
      "\n",
      "Iter: 15000\n",
      "Loss: 0.0019\n",
      "\n",
      "Iter: 16000\n",
      "Loss: 0.0017\n",
      "\n",
      "Iter: 17000\n",
      "Loss: 0.0016\n",
      "\n",
      "Iter: 18000\n",
      "Loss: 0.0015\n",
      "\n",
      "Iter: 19000\n",
      "Loss: 0.0015\n",
      "\n",
      "Iter: 20000\n",
      "Loss: 0.0015\n",
      "\n",
      "Iter: 21000\n",
      "Loss: 0.0014\n",
      "\n",
      "Iter: 22000\n",
      "Loss: 0.0014\n",
      "\n",
      "Iter: 23000\n",
      "Loss: 0.0012\n",
      "\n",
      "Iter: 24000\n",
      "Loss: 0.0012\n",
      "\n",
      "Iter: 25000\n",
      "Loss: 0.0011\n",
      "\n",
      "Iter: 26000\n",
      "Loss: 0.0010\n",
      "\n",
      "Iter: 27000\n",
      "Loss: 0.0009\n",
      "\n",
      "Iter: 28000\n",
      "Loss: 0.0009\n",
      "\n",
      "Iter: 29000\n",
      "Loss: 0.0008\n",
      "\n",
      "Iter: 30000\n",
      "Loss: 0.0007\n",
      "\n",
      "Iter: 31000\n",
      "Loss: 0.0008\n",
      "\n",
      "Iter: 32000\n",
      "Loss: 0.0006\n",
      "\n",
      "Iter: 33000\n",
      "Loss: 0.0007\n",
      "\n",
      "Iter: 34000\n",
      "Loss: 0.0007\n",
      "\n",
      "Iter: 35000\n",
      "Loss: 0.0006\n",
      "\n",
      "Iter: 36000\n",
      "Loss: 0.0006\n",
      "\n",
      "Iter: 37000\n",
      "Loss: 0.0006\n",
      "\n",
      "Iter: 38000\n",
      "Loss: 0.0006\n",
      "\n",
      "Iter: 39000\n",
      "Loss: 0.0005\n",
      "\n",
      "Iter: 40000\n",
      "Loss: 0.0005\n",
      "\n",
      "Iter: 41000\n",
      "Loss: 0.0006\n",
      "\n",
      "Iter: 42000\n",
      "Loss: 0.0005\n",
      "\n",
      "Iter: 43000\n",
      "Loss: 0.0005\n",
      "\n",
      "Iter: 44000\n",
      "Loss: 0.0005\n",
      "\n",
      "Iter: 45000\n",
      "Loss: 0.0005\n",
      "\n",
      "Iter: 46000\n",
      "Loss: 0.0004\n",
      "\n",
      "Iter: 47000\n",
      "Loss: 0.0004\n",
      "\n",
      "Iter: 48000\n",
      "Loss: 0.0005\n",
      "\n",
      "Iter: 49000\n",
      "Loss: 0.0005\n",
      "\n",
      "Iter: 50000\n",
      "Loss: 0.0004\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Training loop\n",
    "for it in range(50001):\n",
    "    # Randomly generate batches\n",
    "    indices = torch.randint(0, num_train, (mb_size,))\n",
    "    X_mb = torch.tensor(X_train[indices], dtype=torch.float32).to(device)\n",
    "    c_mb = torch.tensor(c_train[indices], dtype=torch.float32).to(device)\n",
    "    optimizer.zero_grad()\n",
    "    recon_batch, z_mu, z_logvar = model(X_mb, c_mb)\n",
    "    loss = model.loss_function(recon_batch, X_mb, z_mu, z_logvar)\n",
    "    loss.backward()\n",
    "    optimizer.step()\n",
    "\n",
    "    if it % 1000 == 0:\n",
    "        print('Iter: {}'.format(it))\n",
    "        print('Loss: {:.4f}'.format(loss.item()))\n",
    "        print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "705799\n",
      "0.0003204345703125\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot \n",
    "num_viz = 50\n",
    "viz_idx = torch.randint(0, num_test-1, (1,))\n",
    "print(viz_idx.item())\n",
    "c_sample_seed = torch.tensor(c_test[viz_idx], dtype=torch.float32)\n",
    "c_sample = c_sample_seed.repeat(num_viz, 1).to(device)\n",
    "\n",
    "\n",
    "# obs\n",
    "gap = c_sample_seed[4:]\n",
    "obs1 = [0, gap[1], gap[0], gap[3]]\n",
    "obs2 = [gap[8], 0, gap[10], gap[9]]\n",
    "obs3 = [gap[8], gap[11], gap[9], 1]\n",
    "obs4 = [gap[2], gap[1], gap[4], gap[3]]\n",
    "obs5 = [gap[6], gap[1], 1, gap[3]]\n",
    "obsBounds = [-0.1, -0.1, -0.5, 0, 1.1, 1.5,\n",
    "             -0.1, -0.1, -0.5, 1.1, 0, 1.5,\n",
    "             -0.1, 1, -0.5, 1.1, 1.1, 1.5,\n",
    "             1, -0.1, -0.5, 1.1, 1.1, 1.5]\n",
    "dimW = 2\n",
    "plt.figure(figsize=(10, 6), dpi=80)\n",
    "plt.xlim(-0.1, 1.1)\n",
    "plt.ylim(-0.1, 1.1)\n",
    "\n",
    "obs = torch.tensor(np.concatenate((obs1, obs2, obs3, obs4, obs5, obsBounds), axis=0), dtype=torch.float32)\n",
    "for i in range(obs.shape[0] // (2 * dimW)):\n",
    "    plt.gca().add_patch(\n",
    "        patches.Rectangle(\n",
    "            (obs[i * 2 * dimW], obs[i * 2 * dimW + 1]),   # (x,y)\n",
    "            obs[i * 2 * dimW + dimW] - obs[i * 2 * dimW],  # width\n",
    "            obs[i * 2 * dimW + dimW + 1] - obs[i * 2 * dimW + 1],  # height\n",
    "            alpha=0.6\n",
    "        ))\n",
    "\n",
    "\n",
    "z_viz = torch.randn(num_viz, z_dim).to(device)\n",
    "with torch.no_grad():\n",
    "    cur_time = time.time()\n",
    "    y_viz = model.decoder(z_viz, c_sample).cpu().numpy()\n",
    "    print(time.time()-cur_time)\n",
    "\n",
    "for i in range(0, int(X_dim/2)):\n",
    "    plt.scatter(y_viz[:, i*2+0], y_viz[:, i*2+1], color=\"green\", s=70, alpha=0.1)\n",
    "\n",
    "plt.scatter(c_sample_seed[0], c_sample_seed[1], color='blue', s=250, edgecolors='black')\n",
    "plt.scatter(c_sample_seed[2], c_sample_seed[3], color='red', s=250, edgecolors='black')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "jupyter",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
